MEMCHR(3)                          Linux Programmer's Manual                          MEMCHR(3)

NNAAMMEE
       memchr, memrchr, rawmemchr - scan memory for a character

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttrriinngg..hh>>

       vvooiidd **mmeemmcchhrr((ccoonnsstt vvooiidd **_s,, iinntt _c,, ssiizzee__tt _n));;

       vvooiidd **mmeemmrrcchhrr((ccoonnsstt vvooiidd **_s,, iinntt _c,, ssiizzee__tt _n));;

       vvooiidd **rraawwmmeemmcchhrr((ccoonnsstt vvooiidd **_s,, iinntt _c));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       mmeemmrrcchhrr(), rraawwmmeemmcchhrr(): _GNU_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  mmeemmcchhrr()  function scans the initial _n bytes of the memory area pointed to by _s for
       the first instance of _c.  Both _c and the bytes of the memory area pointed to  by  _s  are
       interpreted as _u_n_s_i_g_n_e_d _c_h_a_r.

       The  mmeemmrrcchhrr()  function is like the mmeemmcchhrr() function, except that it searches backward
       from the end of the _n bytes pointed to by _s instead of forward from the beginning.

       The rraawwmmeemmcchhrr() function is similar to mmeemmcchhrr(): it assumes (i.e., the programmer  knows
       for certain) that an instance of _c lies somewhere in the memory area starting at the lo‐
       cation pointed to by _s, and so performs an optimized search for _c (i.e.,  no  use  of  a
       count argument to limit the range of the search).  If an instance of _c is not found, the
       results are unpredictable.  The following call is a fast means of  locating  a  string's
       terminating null byte:

           char *p = rawmemchr(s, '\0');

RREETTUURRNN VVAALLUUEE
       The  mmeemmcchhrr()  and  mmeemmrrcchhrr() functions return a pointer to the matching byte or NULL if
       the character does not occur in the given memory area.

       The rraawwmmeemmcchhrr() function returns a pointer to the matching byte, if one is found.  If no
       matching byte is found, the result is unspecified.

VVEERRSSIIOONNSS
       rraawwmmeemmcchhrr() first appeared in glibc in version 2.1.

       mmeemmrrcchhrr() first appeared in glibc in version 2.2.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee                        │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────────────────────┼───────────────┼─────────┤
       │mmeemmcchhrr(), mmeemmrrcchhrr(), rraawwmmeemmcchhrr() │ Thread safety │ MT-Safe │
       └─────────────────────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       mmeemmcchhrr(): POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.

       The mmeemmrrcchhrr() function is a GNU extension, available since glibc 2.1.91.

       The rraawwmmeemmcchhrr() function is a GNU extension, available since glibc 2.1.

SSEEEE AALLSSOO
       bbssttrriinngg(3),  ffffss(3),  iinnddeexx(3), mmeemmmmeemm(3), rriinnddeexx(3), ssttrrcchhrr(3), ssttrrppbbrrkk(3), ssttrrrrcchhrr(3),
       ssttrrsseepp(3), ssttrrssppnn(3), ssttrrssttrr(3), wwmmeemmcchhrr(3)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of  the
       project,  information  about reporting bugs, and the latest version of this page, can be
       found at https://www.kernel.org/doc/man-pages/.

                                           2019-03-06                                 MEMCHR(3)
